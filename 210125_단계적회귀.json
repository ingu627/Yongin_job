{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas as gpd\n",
    "import numpy as np\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import seaborn as sns \n",
    "from sklearn.linear_model import LogisticRegression\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.formula.api as smf\n",
    "from sklearn.model_selection import train_test_split\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import RobustScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.read_csv(\"17.용인시_소상공인_매출정보.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gid</th>\n",
       "      <th>ws_cnt</th>\n",
       "      <th>found_age_1</th>\n",
       "      <th>found_age_2</th>\n",
       "      <th>found_age_3</th>\n",
       "      <th>found_age_4</th>\n",
       "      <th>found_age_5</th>\n",
       "      <th>found_age_6</th>\n",
       "      <th>runout_cnt</th>\n",
       "      <th>smbiz_yn_cnt</th>\n",
       "      <th>...</th>\n",
       "      <th>indcd_l_yn</th>\n",
       "      <th>indcd_m_yn</th>\n",
       "      <th>indcd_n_yn</th>\n",
       "      <th>indcd_o_yn</th>\n",
       "      <th>indcd_p_yn</th>\n",
       "      <th>indcd_q_yn</th>\n",
       "      <th>indcd_r_yn</th>\n",
       "      <th>indcd_s_yn</th>\n",
       "      <th>indcd_t_yn</th>\n",
       "      <th>indcd_u_yn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>다바67bb99aa</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>다바68aa99ba</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>다바68aa99bb</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>다바68ab99ba</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>다바68ba99ab</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2252</th>\n",
       "      <td>다사92ab02bb</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2253</th>\n",
       "      <td>다사92ab03aa</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2254</th>\n",
       "      <td>다사92ab04ab</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2255</th>\n",
       "      <td>다사92ab05ab</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2256</th>\n",
       "      <td>다사92ba02bb</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2257 rows × 66 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             gid  ws_cnt  found_age_1  found_age_2  found_age_3  found_age_4  \\\n",
       "0     다바67bb99aa       1            0            0            0            0   \n",
       "1     다바68aa99ba       1            0            0            0            1   \n",
       "2     다바68aa99bb       5            0            1            0            0   \n",
       "3     다바68ab99ba       3            0            0            1            0   \n",
       "4     다바68ba99ab      16            0            1            2            3   \n",
       "...          ...     ...          ...          ...          ...          ...   \n",
       "2252  다사92ab02bb       1            0            0            0            1   \n",
       "2253  다사92ab03aa       2            0            0            0            0   \n",
       "2254  다사92ab04ab       1            0            0            0            0   \n",
       "2255  다사92ab05ab       2            0            1            0            0   \n",
       "2256  다사92ba02bb       3            0            0            0            0   \n",
       "\n",
       "      found_age_5  found_age_6  runout_cnt  smbiz_yn_cnt  ...  indcd_l_yn  \\\n",
       "0               0            1           0             1  ...         0.0   \n",
       "1               0            0           0             0  ...         0.0   \n",
       "2               0            4           0             3  ...         0.0   \n",
       "3               2            0           0             3  ...         0.0   \n",
       "4               2            8           0            13  ...         0.0   \n",
       "...           ...          ...         ...           ...  ...         ...   \n",
       "2252            0            0           0             1  ...         0.0   \n",
       "2253            1            1           0             2  ...         0.0   \n",
       "2254            0            1           0             0  ...         0.0   \n",
       "2255            0            1           0             1  ...         0.0   \n",
       "2256            1            1           1             0  ...         0.0   \n",
       "\n",
       "      indcd_m_yn  indcd_n_yn  indcd_o_yn  indcd_p_yn  indcd_q_yn  indcd_r_yn  \\\n",
       "0            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "1            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "3            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "4            0.0         0.0         0.0         0.0         0.0         1.0   \n",
       "...          ...         ...         ...         ...         ...         ...   \n",
       "2252         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2253         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2254         0.0         0.0         0.0         0.0         1.0         0.0   \n",
       "2255         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2256         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "\n",
       "      indcd_s_yn  indcd_t_yn  indcd_u_yn  \n",
       "0            0.0         0.0         0.0  \n",
       "1            0.0         0.0         0.0  \n",
       "2            0.0         0.0         0.0  \n",
       "3            0.0         0.0         0.0  \n",
       "4            1.0         0.0         0.0  \n",
       "...          ...         ...         ...  \n",
       "2252         0.0         0.0         0.0  \n",
       "2253         0.0         0.0         0.0  \n",
       "2254         0.0         0.0         0.0  \n",
       "2255         0.0         0.0         0.0  \n",
       "2256         0.0         0.0         0.0  \n",
       "\n",
       "[2257 rows x 66 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1[[\"indcd_a_yn\",\"indcd_b_yn\",\"indcd_c_yn\",\"indcd_d_yn\",\"indcd_e_yn\",\"indcd_f_yn\",\"indcd_g_yn\",\"indcd_h_yn\",\"indcd_i_yn\",\"indcd_j_yn\",\"indcd_k_yn\",\"indcd_l_yn\",\"indcd_m_yn\",\"indcd_n_yn\",\"indcd_o_yn\",\"indcd_p_yn\",\"indcd_q_yn\",\"indcd_r_yn\",\"indcd_s_yn\",\"indcd_t_yn\",\"indcd_u_yn\"]] = df1[[\"indcd_a_yn\",\"indcd_b_yn\",\"indcd_c_yn\",\"indcd_d_yn\",\"indcd_e_yn\",\"indcd_f_yn\",\"indcd_g_yn\",\"indcd_h_yn\",\"indcd_i_yn\",\"indcd_j_yn\",\"indcd_k_yn\",\"indcd_l_yn\",\"indcd_m_yn\",\"indcd_n_yn\",\"indcd_o_yn\",\"indcd_p_yn\",\"indcd_q_yn\",\"indcd_r_yn\",\"indcd_s_yn\",\"indcd_t_yn\",\"indcd_u_yn\"]].replace('Y', 1)\n",
    "df1[[\"indcd_a_yn\",\"indcd_b_yn\",\"indcd_c_yn\",\"indcd_d_yn\",\"indcd_e_yn\",\"indcd_f_yn\",\"indcd_g_yn\",\"indcd_h_yn\",\"indcd_i_yn\",\"indcd_j_yn\",\"indcd_k_yn\",\"indcd_l_yn\",\"indcd_m_yn\",\"indcd_n_yn\",\"indcd_o_yn\",\"indcd_p_yn\",\"indcd_q_yn\",\"indcd_r_yn\",\"indcd_s_yn\",\"indcd_t_yn\",\"indcd_u_yn\"]] = df1[[\"indcd_a_yn\",\"indcd_b_yn\",\"indcd_c_yn\",\"indcd_d_yn\",\"indcd_e_yn\",\"indcd_f_yn\",\"indcd_g_yn\",\"indcd_h_yn\",\"indcd_i_yn\",\"indcd_j_yn\",\"indcd_k_yn\",\"indcd_l_yn\",\"indcd_m_yn\",\"indcd_n_yn\",\"indcd_o_yn\",\"indcd_p_yn\",\"indcd_q_yn\",\"indcd_r_yn\",\"indcd_s_yn\",\"indcd_t_yn\",\"indcd_u_yn\"]].replace(np.nan, 0)\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "nCar = df1.shape[0]\n",
    "nVar = df1.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nCar: 2257 nVar: 66\n"
     ]
    }
   ],
   "source": [
    "print('nCar: %d' %nCar, 'nVar: %d' %nVar)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1_ = df1.dropna().drop(['gid'], axis=1, inplace=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ws_cnt</th>\n",
       "      <th>found_age_1</th>\n",
       "      <th>found_age_2</th>\n",
       "      <th>found_age_3</th>\n",
       "      <th>found_age_4</th>\n",
       "      <th>found_age_5</th>\n",
       "      <th>found_age_6</th>\n",
       "      <th>runout_cnt</th>\n",
       "      <th>smbiz_yn_cnt</th>\n",
       "      <th>rpr_per_gender_m</th>\n",
       "      <th>...</th>\n",
       "      <th>indcd_l_yn</th>\n",
       "      <th>indcd_m_yn</th>\n",
       "      <th>indcd_n_yn</th>\n",
       "      <th>indcd_o_yn</th>\n",
       "      <th>indcd_p_yn</th>\n",
       "      <th>indcd_q_yn</th>\n",
       "      <th>indcd_r_yn</th>\n",
       "      <th>indcd_s_yn</th>\n",
       "      <th>indcd_t_yn</th>\n",
       "      <th>indcd_u_yn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2252</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2253</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2254</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2255</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2256</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2257 rows × 65 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      ws_cnt  found_age_1  found_age_2  found_age_3  found_age_4  found_age_5  \\\n",
       "0          1            0            0            0            0            0   \n",
       "1          1            0            0            0            1            0   \n",
       "2          5            0            1            0            0            0   \n",
       "3          3            0            0            1            0            2   \n",
       "4         16            0            1            2            3            2   \n",
       "...      ...          ...          ...          ...          ...          ...   \n",
       "2252       1            0            0            0            1            0   \n",
       "2253       2            0            0            0            0            1   \n",
       "2254       1            0            0            0            0            0   \n",
       "2255       2            0            1            0            0            0   \n",
       "2256       3            0            0            0            0            1   \n",
       "\n",
       "      found_age_6  runout_cnt  smbiz_yn_cnt  rpr_per_gender_m  ...  \\\n",
       "0               1           0             1                 1  ...   \n",
       "1               0           0             0                 1  ...   \n",
       "2               4           0             3                 4  ...   \n",
       "3               0           0             3                 0  ...   \n",
       "4               8           0            13                 8  ...   \n",
       "...           ...         ...           ...               ...  ...   \n",
       "2252            0           0             1                 0  ...   \n",
       "2253            1           0             2                 2  ...   \n",
       "2254            1           0             0                 1  ...   \n",
       "2255            1           0             1                 2  ...   \n",
       "2256            1           1             0                 1  ...   \n",
       "\n",
       "      indcd_l_yn  indcd_m_yn  indcd_n_yn  indcd_o_yn  indcd_p_yn  indcd_q_yn  \\\n",
       "0            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "1            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "3            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "4            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "...          ...         ...         ...         ...         ...         ...   \n",
       "2252         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2253         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2254         0.0         0.0         0.0         0.0         0.0         1.0   \n",
       "2255         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2256         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "\n",
       "      indcd_r_yn  indcd_s_yn  indcd_t_yn  indcd_u_yn  \n",
       "0            0.0         0.0         0.0         0.0  \n",
       "1            0.0         0.0         0.0         0.0  \n",
       "2            0.0         0.0         0.0         0.0  \n",
       "3            0.0         0.0         0.0         0.0  \n",
       "4            1.0         1.0         0.0         0.0  \n",
       "...          ...         ...         ...         ...  \n",
       "2252         0.0         0.0         0.0         0.0  \n",
       "2253         0.0         0.0         0.0         0.0  \n",
       "2254         0.0         0.0         0.0         0.0  \n",
       "2255         0.0         0.0         0.0         0.0  \n",
       "2256         0.0         0.0         0.0         0.0  \n",
       "\n",
       "[2257 rows x 65 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1_data = sm.add_constant(df1_, has_constant='add')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>ws_cnt</th>\n",
       "      <th>found_age_1</th>\n",
       "      <th>found_age_2</th>\n",
       "      <th>found_age_3</th>\n",
       "      <th>found_age_4</th>\n",
       "      <th>found_age_5</th>\n",
       "      <th>found_age_6</th>\n",
       "      <th>runout_cnt</th>\n",
       "      <th>smbiz_yn_cnt</th>\n",
       "      <th>...</th>\n",
       "      <th>indcd_l_yn</th>\n",
       "      <th>indcd_m_yn</th>\n",
       "      <th>indcd_n_yn</th>\n",
       "      <th>indcd_o_yn</th>\n",
       "      <th>indcd_p_yn</th>\n",
       "      <th>indcd_q_yn</th>\n",
       "      <th>indcd_r_yn</th>\n",
       "      <th>indcd_s_yn</th>\n",
       "      <th>indcd_t_yn</th>\n",
       "      <th>indcd_u_yn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2252</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2253</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2254</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2255</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2256</th>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2257 rows × 66 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      const  ws_cnt  found_age_1  found_age_2  found_age_3  found_age_4  \\\n",
       "0       1.0       1            0            0            0            0   \n",
       "1       1.0       1            0            0            0            1   \n",
       "2       1.0       5            0            1            0            0   \n",
       "3       1.0       3            0            0            1            0   \n",
       "4       1.0      16            0            1            2            3   \n",
       "...     ...     ...          ...          ...          ...          ...   \n",
       "2252    1.0       1            0            0            0            1   \n",
       "2253    1.0       2            0            0            0            0   \n",
       "2254    1.0       1            0            0            0            0   \n",
       "2255    1.0       2            0            1            0            0   \n",
       "2256    1.0       3            0            0            0            0   \n",
       "\n",
       "      found_age_5  found_age_6  runout_cnt  smbiz_yn_cnt  ...  indcd_l_yn  \\\n",
       "0               0            1           0             1  ...         0.0   \n",
       "1               0            0           0             0  ...         0.0   \n",
       "2               0            4           0             3  ...         0.0   \n",
       "3               2            0           0             3  ...         0.0   \n",
       "4               2            8           0            13  ...         0.0   \n",
       "...           ...          ...         ...           ...  ...         ...   \n",
       "2252            0            0           0             1  ...         0.0   \n",
       "2253            1            1           0             2  ...         0.0   \n",
       "2254            0            1           0             0  ...         0.0   \n",
       "2255            0            1           0             1  ...         0.0   \n",
       "2256            1            1           1             0  ...         0.0   \n",
       "\n",
       "      indcd_m_yn  indcd_n_yn  indcd_o_yn  indcd_p_yn  indcd_q_yn  indcd_r_yn  \\\n",
       "0            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "1            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "3            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "4            0.0         0.0         0.0         0.0         0.0         1.0   \n",
       "...          ...         ...         ...         ...         ...         ...   \n",
       "2252         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2253         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2254         0.0         0.0         0.0         0.0         1.0         0.0   \n",
       "2255         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2256         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "\n",
       "      indcd_s_yn  indcd_t_yn  indcd_u_yn  \n",
       "0            0.0         0.0         0.0  \n",
       "1            0.0         0.0         0.0  \n",
       "2            0.0         0.0         0.0  \n",
       "3            0.0         0.0         0.0  \n",
       "4            1.0         0.0         0.0  \n",
       "...          ...         ...         ...  \n",
       "2252         0.0         0.0         0.0  \n",
       "2253         0.0         0.0         0.0  \n",
       "2254         0.0         0.0         0.0  \n",
       "2255         0.0         0.0         0.0  \n",
       "2256         0.0         0.0         0.0  \n",
       "\n",
       "[2257 rows x 66 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1579, 65) (678, 65) (1579,) (678,)\n"
     ]
    }
   ],
   "source": [
    "feature_columns = list(df1_data.columns.difference(['runout_cnt']))\n",
    "X = df1_data[feature_columns]\n",
    "y = df1_data.runout_cnt\n",
    "train_x, test_x, train_y, test_y = train_test_split(X, y, train_size = 0.7, test_size = 0.3)\n",
    "print(train_x.shape, test_x.shape, train_y.shape, test_y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Expected 2D array, got 1D array instead:\narray=[0. 0. 0. ... 0. 0. 0.].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-16-3dd8bc98f950>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLogisticRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_x\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;31m#full_model = sm.Logit(train_y, train_x)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#fitted_full_model = full_model.fit()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/app-root/lib/python3.6/site-packages/sklearn/linear_model/_logistic.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m   1342\u001b[0m         X, y = self._validate_data(X, y, accept_sparse='csr', dtype=_dtype,\n\u001b[1;32m   1343\u001b[0m                                    \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"C\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1344\u001b[0;31m                                    accept_large_sparse=solver != 'liblinear')\n\u001b[0m\u001b[1;32m   1345\u001b[0m         \u001b[0mcheck_classification_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1346\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/app-root/lib/python3.6/site-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    430\u001b[0m                 \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    431\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 432\u001b[0;31m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    433\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    434\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/app-root/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     70\u001b[0m                           FutureWarning)\n\u001b[1;32m     71\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/app-root/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m    800\u001b[0m                     \u001b[0mensure_min_samples\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mensure_min_samples\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    801\u001b[0m                     \u001b[0mensure_min_features\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mensure_min_features\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 802\u001b[0;31m                     estimator=estimator)\n\u001b[0m\u001b[1;32m    803\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mmulti_output\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    804\u001b[0m         y = check_array(y, accept_sparse='csr', force_all_finite=True,\n",
      "\u001b[0;32m/opt/app-root/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     70\u001b[0m                           FutureWarning)\n\u001b[1;32m     71\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/app-root/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    621\u001b[0m                     \u001b[0;34m\"Reshape your data either using array.reshape(-1, 1) if \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m                     \u001b[0;34m\"your data has a single feature or array.reshape(1, -1) \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 623\u001b[0;31m                     \"if it contains a single sample.\".format(array))\n\u001b[0m\u001b[1;32m    624\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    625\u001b[0m         \u001b[0;31m# in the future np.flexible dtypes will be handled like object dtypes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Expected 2D array, got 1D array instead:\narray=[0. 0. 0. ... 0. 0. 0.].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
     ]
    }
   ],
   "source": [
    "model = LogisticRegression()\n",
    "\n",
    "model.fit(train_y, train_x)\n",
    "#full_model = sm.Logit(train_y, train_x)\n",
    "#fitted_full_model = full_model.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>runout_cnt</td>    <th>  R-squared:         </th>  <td>   1.000</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th>  <td>   1.000</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th>  <td>4.608e+23</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 26 Jan 2021</td> <th>  Prob (F-statistic):</th>   <td>  0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>14:51:43</td>     <th>  Log-Likelihood:    </th>  <td>  37922.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  1579</td>      <th>  AIC:               </th> <td>-7.573e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  1521</td>      <th>  BIC:               </th> <td>-7.542e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>    57</td>      <th>                     </th>      <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>      <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "             <td></td>               <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>age10_ratio</th>            <td> 2.645e-14</td> <td> 1.33e-13</td> <td>    0.199</td> <td> 0.843</td> <td>-2.35e-13</td> <td> 2.88e-13</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>age20_ratio</th>            <td>-2.771e-15</td> <td>  2.7e-14</td> <td>   -0.103</td> <td> 0.918</td> <td>-5.57e-14</td> <td> 5.01e-14</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>age30_ratio</th>            <td>    -3e-15</td> <td> 1.85e-14</td> <td>   -0.162</td> <td> 0.871</td> <td>-3.93e-14</td> <td> 3.33e-14</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>age40_ratio</th>            <td>-3.237e-15</td> <td> 1.67e-14</td> <td>   -0.194</td> <td> 0.846</td> <td> -3.6e-14</td> <td> 2.95e-14</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>age50_ratio</th>            <td>-4.807e-15</td> <td> 1.89e-14</td> <td>   -0.254</td> <td> 0.800</td> <td> -4.2e-14</td> <td> 3.24e-14</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>age60_ratio</th>            <td>-4.311e-15</td> <td>  2.7e-14</td> <td>   -0.160</td> <td> 0.873</td> <td>-5.72e-14</td> <td> 4.86e-14</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>age70_ratio</th>            <td>-4.281e-15</td> <td> 4.62e-14</td> <td>   -0.093</td> <td> 0.926</td> <td>-9.49e-14</td> <td> 8.63e-14</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                  <td> 1.204e-13</td> <td>  1.1e-12</td> <td>    0.109</td> <td> 0.913</td> <td>-2.05e-12</td> <td> 2.29e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>found_age_1</th>            <td>   -1.0000</td> <td>  5.6e-13</td> <td>-1.78e+12</td> <td> 0.000</td> <td>   -1.000</td> <td>   -1.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>found_age_2</th>            <td>   -1.0000</td> <td> 4.84e-13</td> <td>-2.07e+12</td> <td> 0.000</td> <td>   -1.000</td> <td>   -1.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>found_age_3</th>            <td>   -1.0000</td> <td> 4.44e-13</td> <td>-2.25e+12</td> <td> 0.000</td> <td>   -1.000</td> <td>   -1.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>found_age_4</th>            <td>   -1.0000</td> <td> 4.63e-13</td> <td>-2.16e+12</td> <td> 0.000</td> <td>   -1.000</td> <td>   -1.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>found_age_5</th>            <td>   -1.0000</td> <td> 4.99e-13</td> <td>   -2e+12</td> <td> 0.000</td> <td>   -1.000</td> <td>   -1.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>found_age_6</th>            <td>   -1.0000</td> <td> 4.14e-13</td> <td>-2.42e+12</td> <td> 0.000</td> <td>   -1.000</td> <td>   -1.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_a_yn</th>             <td>-9.362e-14</td> <td> 2.82e-12</td> <td>   -0.033</td> <td> 0.974</td> <td>-5.63e-12</td> <td> 5.44e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_b_yn</th>             <td> 4.883e-14</td> <td> 2.48e-25</td> <td> 1.97e+11</td> <td> 0.000</td> <td> 4.88e-14</td> <td> 4.88e-14</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_c_yn</th>             <td> 1.253e-13</td> <td> 6.29e-13</td> <td>    0.199</td> <td> 0.842</td> <td>-1.11e-12</td> <td> 1.36e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_d_yn</th>             <td> 6.793e-15</td> <td> 9.19e-12</td> <td>    0.001</td> <td> 0.999</td> <td> -1.8e-11</td> <td>  1.8e-11</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_e_yn</th>             <td>-1.314e-15</td> <td> 3.14e-26</td> <td>-4.18e+10</td> <td> 0.000</td> <td>-1.31e-15</td> <td>-1.31e-15</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_f_yn</th>             <td> 4.191e-14</td> <td> 1.43e-12</td> <td>    0.029</td> <td> 0.977</td> <td>-2.76e-12</td> <td> 2.84e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_g_yn</th>             <td>-1.493e-14</td> <td> 5.35e-13</td> <td>   -0.028</td> <td> 0.978</td> <td>-1.06e-12</td> <td> 1.03e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_h_yn</th>             <td>-2.527e-14</td> <td> 1.18e-12</td> <td>   -0.021</td> <td> 0.983</td> <td>-2.34e-12</td> <td> 2.29e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_i_yn</th>             <td>-4.397e-14</td> <td> 5.14e-13</td> <td>   -0.086</td> <td> 0.932</td> <td>-1.05e-12</td> <td> 9.64e-13</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_j_yn</th>             <td> 1.031e-13</td> <td> 1.28e-12</td> <td>    0.081</td> <td> 0.936</td> <td>-2.41e-12</td> <td> 2.61e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_k_yn</th>             <td>-4.108e-15</td> <td> 3.59e-12</td> <td>   -0.001</td> <td> 0.999</td> <td>-7.05e-12</td> <td> 7.04e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_l_yn</th>             <td>-1.057e-13</td> <td> 1.72e-12</td> <td>   -0.061</td> <td> 0.951</td> <td>-3.49e-12</td> <td> 3.27e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_m_yn</th>             <td> 5.301e-15</td> <td> 9.32e-13</td> <td>    0.006</td> <td> 0.995</td> <td>-1.82e-12</td> <td> 1.83e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_n_yn</th>             <td>-3.612e-14</td> <td> 8.52e-13</td> <td>   -0.042</td> <td> 0.966</td> <td>-1.71e-12</td> <td> 1.63e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_o_yn</th>             <td> 2.015e-16</td> <td> 1.05e-26</td> <td> 1.91e+10</td> <td> 0.000</td> <td> 2.02e-16</td> <td> 2.02e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_p_yn</th>             <td> 9.116e-14</td> <td> 7.35e-13</td> <td>    0.124</td> <td> 0.901</td> <td>-1.35e-12</td> <td> 1.53e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_q_yn</th>             <td> 2.909e-14</td> <td> 9.06e-13</td> <td>    0.032</td> <td> 0.974</td> <td>-1.75e-12</td> <td> 1.81e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_r_yn</th>             <td>  5.09e-15</td> <td>  7.7e-13</td> <td>    0.007</td> <td> 0.995</td> <td> -1.5e-12</td> <td> 1.51e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_s_yn</th>             <td> 7.875e-15</td> <td> 5.73e-13</td> <td>    0.014</td> <td> 0.989</td> <td>-1.12e-12</td> <td> 1.13e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_t_yn</th>             <td> 3.426e-13</td> <td> 5.51e-12</td> <td>    0.062</td> <td> 0.950</td> <td>-1.05e-11</td> <td> 1.12e-11</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_u_yn</th>             <td> 1.852e-16</td> <td> 9.14e-27</td> <td> 2.03e+10</td> <td> 0.000</td> <td> 1.85e-16</td> <td> 1.85e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>rpr_per_age_bin_10</th>     <td>    0.1429</td> <td>  3.3e-12</td> <td> 4.33e+10</td> <td> 0.000</td> <td>    0.143</td> <td>    0.143</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>rpr_per_age_bin_20</th>     <td>    0.1429</td> <td> 9.67e-13</td> <td> 1.48e+11</td> <td> 0.000</td> <td>    0.143</td> <td>    0.143</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>rpr_per_age_bin_30to50</th> <td>    0.1429</td> <td>  8.9e-13</td> <td> 1.61e+11</td> <td> 0.000</td> <td>    0.143</td> <td>    0.143</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>rpr_per_age_bin_50over</th> <td>    0.1429</td> <td> 9.27e-13</td> <td> 1.54e+11</td> <td> 0.000</td> <td>    0.143</td> <td>    0.143</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>rpr_per_gender_f</th>       <td>    0.2857</td> <td> 3.16e-13</td> <td> 9.03e+11</td> <td> 0.000</td> <td>    0.286</td> <td>    0.286</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>rpr_per_gender_m</th>       <td>    0.2857</td> <td> 3.21e-13</td> <td>  8.9e+11</td> <td> 0.000</td> <td>    0.286</td> <td>    0.286</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_201703</th>   <td> 8.913e-17</td> <td> 2.49e-16</td> <td>    0.358</td> <td> 0.721</td> <td>   -4e-16</td> <td> 5.78e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_201706</th>   <td>-2.832e-16</td> <td> 3.28e-16</td> <td>   -0.863</td> <td> 0.388</td> <td>-9.27e-16</td> <td>  3.6e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_201709</th>   <td> -1.62e-16</td> <td> 2.88e-16</td> <td>   -0.563</td> <td> 0.574</td> <td>-7.26e-16</td> <td> 4.02e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_201712</th>   <td>  -3.5e-18</td> <td> 2.88e-16</td> <td>   -0.012</td> <td> 0.990</td> <td>-5.69e-16</td> <td> 5.62e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_201803</th>   <td>-1.177e-16</td> <td>  2.7e-16</td> <td>   -0.435</td> <td> 0.664</td> <td>-6.48e-16</td> <td> 4.13e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_201806</th>   <td> 1.172e-16</td> <td> 2.32e-16</td> <td>    0.505</td> <td> 0.614</td> <td>-3.38e-16</td> <td> 5.72e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_201809</th>   <td>-3.223e-16</td> <td> 2.17e-16</td> <td>   -1.487</td> <td> 0.137</td> <td>-7.48e-16</td> <td> 1.03e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_201812</th>   <td>-2.366e-16</td> <td> 2.31e-16</td> <td>   -1.024</td> <td> 0.306</td> <td> -6.9e-16</td> <td> 2.16e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_201903</th>   <td> 1.078e-16</td> <td> 2.34e-16</td> <td>    0.460</td> <td> 0.645</td> <td>-3.51e-16</td> <td> 5.67e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_201906</th>   <td>-1.088e-16</td> <td> 2.56e-16</td> <td>   -0.424</td> <td> 0.671</td> <td>-6.11e-16</td> <td> 3.94e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_201909</th>   <td> 3.644e-17</td> <td> 1.86e-16</td> <td>    0.196</td> <td> 0.845</td> <td>-3.28e-16</td> <td> 4.01e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_201912</th>   <td>-4.271e-16</td> <td>  1.9e-16</td> <td>   -2.251</td> <td> 0.025</td> <td>-7.99e-16</td> <td>-5.49e-17</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_202003</th>   <td> 2.749e-16</td> <td> 2.22e-16</td> <td>    1.238</td> <td> 0.216</td> <td>-1.61e-16</td> <td>  7.1e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_202006</th>   <td> 2.294e-16</td> <td> 2.34e-16</td> <td>    0.981</td> <td> 0.327</td> <td>-2.29e-16</td> <td> 6.88e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_202009</th>   <td> 1.449e-16</td> <td> 1.94e-16</td> <td>    0.745</td> <td> 0.456</td> <td>-2.36e-16</td> <td> 5.26e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>smbiz_yn_cnt</th>           <td>-4.788e-16</td> <td> 1.49e-13</td> <td>   -0.003</td> <td> 0.997</td> <td>-2.92e-13</td> <td> 2.91e-13</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sme_loan_cnt</th>           <td> 5.933e-16</td> <td> 1.38e-13</td> <td>    0.004</td> <td> 0.997</td> <td>-2.69e-13</td> <td> 2.71e-13</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sme_loan_y_1</th>           <td>-9.298e-16</td> <td> 4.29e-13</td> <td>   -0.002</td> <td> 0.998</td> <td>-8.43e-13</td> <td> 8.41e-13</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sme_loan_y_2</th>           <td>-1.098e-15</td> <td> 4.38e-13</td> <td>   -0.003</td> <td> 0.998</td> <td> -8.6e-13</td> <td> 8.57e-13</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sme_loan_y_3</th>           <td>-1.624e-15</td> <td> 3.56e-13</td> <td>   -0.005</td> <td> 0.996</td> <td>   -7e-13</td> <td> 6.97e-13</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sme_loan_y_4</th>           <td>-5.551e-17</td> <td> 2.37e-13</td> <td>   -0.000</td> <td> 1.000</td> <td>-4.64e-13</td> <td> 4.64e-13</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sme_loan_y_5</th>           <td> -6.87e-16</td> <td> 3.15e-13</td> <td>   -0.002</td> <td> 0.998</td> <td>-6.18e-13</td> <td> 6.16e-13</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sme_loan_y_6</th>           <td> 9.541e-17</td> <td> 2.34e-13</td> <td>    0.000</td> <td> 1.000</td> <td>-4.59e-13</td> <td>  4.6e-13</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ws_cnt</th>                 <td>    0.5714</td> <td> 6.24e-13</td> <td> 9.15e+11</td> <td> 0.000</td> <td>    0.571</td> <td>    0.571</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>1814.380</td> <th>  Durbin-Watson:     </th>  <td>   1.804</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>150500.378</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 5.899</td>  <th>  Prob(JB):          </th>  <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td>49.350</td>  <th>  Cond. No.          </th>  <td>1.02e+16</td> \n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The smallest eigenvalue is 3.67e-20. This might indicate that there are<br/>strong multicollinearity problems or that the design matrix is singular."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:             runout_cnt   R-squared:                       1.000\n",
       "Model:                            OLS   Adj. R-squared:                  1.000\n",
       "Method:                 Least Squares   F-statistic:                 4.608e+23\n",
       "Date:                Tue, 26 Jan 2021   Prob (F-statistic):               0.00\n",
       "Time:                        14:51:43   Log-Likelihood:                 37922.\n",
       "No. Observations:                1579   AIC:                        -7.573e+04\n",
       "Df Residuals:                    1521   BIC:                        -7.542e+04\n",
       "Df Model:                          57                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==========================================================================================\n",
       "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------\n",
       "age10_ratio             2.645e-14   1.33e-13      0.199      0.843   -2.35e-13    2.88e-13\n",
       "age20_ratio            -2.771e-15    2.7e-14     -0.103      0.918   -5.57e-14    5.01e-14\n",
       "age30_ratio                -3e-15   1.85e-14     -0.162      0.871   -3.93e-14    3.33e-14\n",
       "age40_ratio            -3.237e-15   1.67e-14     -0.194      0.846    -3.6e-14    2.95e-14\n",
       "age50_ratio            -4.807e-15   1.89e-14     -0.254      0.800    -4.2e-14    3.24e-14\n",
       "age60_ratio            -4.311e-15    2.7e-14     -0.160      0.873   -5.72e-14    4.86e-14\n",
       "age70_ratio            -4.281e-15   4.62e-14     -0.093      0.926   -9.49e-14    8.63e-14\n",
       "const                   1.204e-13    1.1e-12      0.109      0.913   -2.05e-12    2.29e-12\n",
       "found_age_1               -1.0000    5.6e-13  -1.78e+12      0.000      -1.000      -1.000\n",
       "found_age_2               -1.0000   4.84e-13  -2.07e+12      0.000      -1.000      -1.000\n",
       "found_age_3               -1.0000   4.44e-13  -2.25e+12      0.000      -1.000      -1.000\n",
       "found_age_4               -1.0000   4.63e-13  -2.16e+12      0.000      -1.000      -1.000\n",
       "found_age_5               -1.0000   4.99e-13     -2e+12      0.000      -1.000      -1.000\n",
       "found_age_6               -1.0000   4.14e-13  -2.42e+12      0.000      -1.000      -1.000\n",
       "indcd_a_yn             -9.362e-14   2.82e-12     -0.033      0.974   -5.63e-12    5.44e-12\n",
       "indcd_b_yn              4.883e-14   2.48e-25   1.97e+11      0.000    4.88e-14    4.88e-14\n",
       "indcd_c_yn              1.253e-13   6.29e-13      0.199      0.842   -1.11e-12    1.36e-12\n",
       "indcd_d_yn              6.793e-15   9.19e-12      0.001      0.999    -1.8e-11     1.8e-11\n",
       "indcd_e_yn             -1.314e-15   3.14e-26  -4.18e+10      0.000   -1.31e-15   -1.31e-15\n",
       "indcd_f_yn              4.191e-14   1.43e-12      0.029      0.977   -2.76e-12    2.84e-12\n",
       "indcd_g_yn             -1.493e-14   5.35e-13     -0.028      0.978   -1.06e-12    1.03e-12\n",
       "indcd_h_yn             -2.527e-14   1.18e-12     -0.021      0.983   -2.34e-12    2.29e-12\n",
       "indcd_i_yn             -4.397e-14   5.14e-13     -0.086      0.932   -1.05e-12    9.64e-13\n",
       "indcd_j_yn              1.031e-13   1.28e-12      0.081      0.936   -2.41e-12    2.61e-12\n",
       "indcd_k_yn             -4.108e-15   3.59e-12     -0.001      0.999   -7.05e-12    7.04e-12\n",
       "indcd_l_yn             -1.057e-13   1.72e-12     -0.061      0.951   -3.49e-12    3.27e-12\n",
       "indcd_m_yn              5.301e-15   9.32e-13      0.006      0.995   -1.82e-12    1.83e-12\n",
       "indcd_n_yn             -3.612e-14   8.52e-13     -0.042      0.966   -1.71e-12    1.63e-12\n",
       "indcd_o_yn              2.015e-16   1.05e-26   1.91e+10      0.000    2.02e-16    2.02e-16\n",
       "indcd_p_yn              9.116e-14   7.35e-13      0.124      0.901   -1.35e-12    1.53e-12\n",
       "indcd_q_yn              2.909e-14   9.06e-13      0.032      0.974   -1.75e-12    1.81e-12\n",
       "indcd_r_yn               5.09e-15    7.7e-13      0.007      0.995    -1.5e-12    1.51e-12\n",
       "indcd_s_yn              7.875e-15   5.73e-13      0.014      0.989   -1.12e-12    1.13e-12\n",
       "indcd_t_yn              3.426e-13   5.51e-12      0.062      0.950   -1.05e-11    1.12e-11\n",
       "indcd_u_yn              1.852e-16   9.14e-27   2.03e+10      0.000    1.85e-16    1.85e-16\n",
       "rpr_per_age_bin_10         0.1429    3.3e-12   4.33e+10      0.000       0.143       0.143\n",
       "rpr_per_age_bin_20         0.1429   9.67e-13   1.48e+11      0.000       0.143       0.143\n",
       "rpr_per_age_bin_30to50     0.1429    8.9e-13   1.61e+11      0.000       0.143       0.143\n",
       "rpr_per_age_bin_50over     0.1429   9.27e-13   1.54e+11      0.000       0.143       0.143\n",
       "rpr_per_gender_f           0.2857   3.16e-13   9.03e+11      0.000       0.286       0.286\n",
       "rpr_per_gender_m           0.2857   3.21e-13    8.9e+11      0.000       0.286       0.286\n",
       "sales_est_amt_201703    8.913e-17   2.49e-16      0.358      0.721      -4e-16    5.78e-16\n",
       "sales_est_amt_201706   -2.832e-16   3.28e-16     -0.863      0.388   -9.27e-16     3.6e-16\n",
       "sales_est_amt_201709    -1.62e-16   2.88e-16     -0.563      0.574   -7.26e-16    4.02e-16\n",
       "sales_est_amt_201712     -3.5e-18   2.88e-16     -0.012      0.990   -5.69e-16    5.62e-16\n",
       "sales_est_amt_201803   -1.177e-16    2.7e-16     -0.435      0.664   -6.48e-16    4.13e-16\n",
       "sales_est_amt_201806    1.172e-16   2.32e-16      0.505      0.614   -3.38e-16    5.72e-16\n",
       "sales_est_amt_201809   -3.223e-16   2.17e-16     -1.487      0.137   -7.48e-16    1.03e-16\n",
       "sales_est_amt_201812   -2.366e-16   2.31e-16     -1.024      0.306    -6.9e-16    2.16e-16\n",
       "sales_est_amt_201903    1.078e-16   2.34e-16      0.460      0.645   -3.51e-16    5.67e-16\n",
       "sales_est_amt_201906   -1.088e-16   2.56e-16     -0.424      0.671   -6.11e-16    3.94e-16\n",
       "sales_est_amt_201909    3.644e-17   1.86e-16      0.196      0.845   -3.28e-16    4.01e-16\n",
       "sales_est_amt_201912   -4.271e-16    1.9e-16     -2.251      0.025   -7.99e-16   -5.49e-17\n",
       "sales_est_amt_202003    2.749e-16   2.22e-16      1.238      0.216   -1.61e-16     7.1e-16\n",
       "sales_est_amt_202006    2.294e-16   2.34e-16      0.981      0.327   -2.29e-16    6.88e-16\n",
       "sales_est_amt_202009    1.449e-16   1.94e-16      0.745      0.456   -2.36e-16    5.26e-16\n",
       "smbiz_yn_cnt           -4.788e-16   1.49e-13     -0.003      0.997   -2.92e-13    2.91e-13\n",
       "sme_loan_cnt            5.933e-16   1.38e-13      0.004      0.997   -2.69e-13    2.71e-13\n",
       "sme_loan_y_1           -9.298e-16   4.29e-13     -0.002      0.998   -8.43e-13    8.41e-13\n",
       "sme_loan_y_2           -1.098e-15   4.38e-13     -0.003      0.998    -8.6e-13    8.57e-13\n",
       "sme_loan_y_3           -1.624e-15   3.56e-13     -0.005      0.996      -7e-13    6.97e-13\n",
       "sme_loan_y_4           -5.551e-17   2.37e-13     -0.000      1.000   -4.64e-13    4.64e-13\n",
       "sme_loan_y_5            -6.87e-16   3.15e-13     -0.002      0.998   -6.18e-13    6.16e-13\n",
       "sme_loan_y_6            9.541e-17   2.34e-13      0.000      1.000   -4.59e-13     4.6e-13\n",
       "ws_cnt                     0.5714   6.24e-13   9.15e+11      0.000       0.571       0.571\n",
       "==============================================================================\n",
       "Omnibus:                     1814.380   Durbin-Watson:                   1.804\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           150500.378\n",
       "Skew:                           5.899   Prob(JB):                         0.00\n",
       "Kurtosis:                      49.350   Cond. No.                     1.02e+16\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The smallest eigenvalue is 3.67e-20. This might indicate that there are\n",
       "strong multicollinearity problems or that the design matrix is singular.\n",
       "\"\"\""
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fitted_full_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             const    ws_cnt  found_age_1  found_age_2  found_age_3  \\\n",
      "const          NaN       NaN          NaN          NaN          NaN   \n",
      "ws_cnt         NaN  1.000000     0.786584     0.891499     0.862444   \n",
      "found_age_1    NaN  0.786584     1.000000     0.800965     0.770774   \n",
      "found_age_2    NaN  0.891499     0.800965     1.000000     0.849794   \n",
      "found_age_3    NaN  0.862444     0.770774     0.849794     1.000000   \n",
      "...            ...       ...          ...          ...          ...   \n",
      "indcd_q_yn     NaN  0.562379     0.444118     0.516708     0.487945   \n",
      "indcd_r_yn     NaN  0.508498     0.398262     0.468031     0.446520   \n",
      "indcd_s_yn     NaN  0.399470     0.303069     0.348817     0.345853   \n",
      "indcd_t_yn     NaN  0.162677     0.127927     0.132391     0.073178   \n",
      "indcd_u_yn     NaN       NaN          NaN          NaN          NaN   \n",
      "\n",
      "             found_age_4  found_age_5  found_age_6  runout_cnt  smbiz_yn_cnt  \\\n",
      "const                NaN          NaN          NaN         NaN           NaN   \n",
      "ws_cnt          0.909119     0.898039     0.965736    0.847753      0.986213   \n",
      "found_age_1     0.706693     0.695890     0.677011    0.690346      0.770274   \n",
      "found_age_2     0.790882     0.780352     0.782910    0.778523      0.871843   \n",
      "found_age_3     0.788689     0.735104     0.741203    0.750570      0.848323   \n",
      "...                  ...          ...          ...         ...           ...   \n",
      "indcd_q_yn      0.502279     0.490556     0.546588    0.433260      0.564290   \n",
      "indcd_r_yn      0.456369     0.449386     0.489261    0.415363      0.515450   \n",
      "indcd_s_yn      0.362890     0.357392     0.390912    0.314217      0.411141   \n",
      "indcd_t_yn      0.128005     0.140677     0.185095    0.113495      0.124050   \n",
      "indcd_u_yn           NaN          NaN          NaN         NaN           NaN   \n",
      "\n",
      "             ...  indcd_l_yn  indcd_m_yn  indcd_n_yn  indcd_o_yn  indcd_p_yn  \\\n",
      "const        ...         NaN         NaN         NaN         NaN         NaN   \n",
      "ws_cnt       ...    0.352044    0.526220    0.436110         NaN    0.434061   \n",
      "found_age_1  ...    0.281131    0.400311    0.350587         NaN    0.337767   \n",
      "found_age_2  ...    0.346883    0.469768    0.424507         NaN    0.414112   \n",
      "found_age_3  ...    0.303743    0.453523    0.420819         NaN    0.388815   \n",
      "...          ...         ...         ...         ...         ...         ...   \n",
      "indcd_q_yn   ...    0.220317    0.425062    0.302279         NaN    0.414901   \n",
      "indcd_r_yn   ...    0.160806    0.361663    0.290539         NaN    0.381994   \n",
      "indcd_s_yn   ...    0.132935    0.320637    0.248891         NaN    0.417259   \n",
      "indcd_t_yn   ...    0.060356    0.019349    0.051512         NaN    0.051132   \n",
      "indcd_u_yn   ...         NaN         NaN         NaN         NaN         NaN   \n",
      "\n",
      "             indcd_q_yn  indcd_r_yn  indcd_s_yn  indcd_t_yn  indcd_u_yn  \n",
      "const               NaN         NaN         NaN         NaN         NaN  \n",
      "ws_cnt         0.562379    0.508498    0.399470    0.162677         NaN  \n",
      "found_age_1    0.444118    0.398262    0.303069    0.127927         NaN  \n",
      "found_age_2    0.516708    0.468031    0.348817    0.132391         NaN  \n",
      "found_age_3    0.487945    0.446520    0.345853    0.073178         NaN  \n",
      "...                 ...         ...         ...         ...         ...  \n",
      "indcd_q_yn     1.000000    0.423111    0.371910    0.076752         NaN  \n",
      "indcd_r_yn     0.423111    1.000000    0.348635    0.037166         NaN  \n",
      "indcd_s_yn     0.371910    0.348635    1.000000    0.054674         NaN  \n",
      "indcd_t_yn     0.076752    0.037166    0.054674    1.000000         NaN  \n",
      "indcd_u_yn          NaN         NaN         NaN         NaN         NaN  \n",
      "\n",
      "[66 rows x 66 columns]\n"
     ]
    }
   ],
   "source": [
    "corr=df1_data.corr(method='pearson')\n",
    "print(corr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plot' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-51-e1c1d426789d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlight_palette\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'grey'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mas_cmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mannot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcmap\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'plot' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cmap=sns.light_palette('grey', as_cmap=True)\n",
    "sns.heatmap(corr, annot=True, cmap=cmap)\n",
    "plot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/app-root/lib/python3.6/site-packages/statsmodels/stats/outliers_influence.py:193: RuntimeWarning: divide by zero encountered in double_scalars\n",
      "  vif = 1. / (1. - r_squared_i)\n",
      "/opt/app-root/lib/python3.6/site-packages/statsmodels/regression/linear_model.py:1715: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  return 1 - self.ssr/self.centered_tss\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIF Factor</th>\n",
       "      <th>features</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22.002071</td>\n",
       "      <td>const</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>inf</td>\n",
       "      <td>ws_cnt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>inf</td>\n",
       "      <td>found_age_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>inf</td>\n",
       "      <td>found_age_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>inf</td>\n",
       "      <td>found_age_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>1.759223</td>\n",
       "      <td>indcd_q_yn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>1.570958</td>\n",
       "      <td>indcd_r_yn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>1.463970</td>\n",
       "      <td>indcd_s_yn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>1.242008</td>\n",
       "      <td>indcd_t_yn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>NaN</td>\n",
       "      <td>indcd_u_yn</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>66 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    VIF Factor     features\n",
       "0    22.002071        const\n",
       "1          inf       ws_cnt\n",
       "2          inf  found_age_1\n",
       "3          inf  found_age_2\n",
       "4          inf  found_age_3\n",
       "..         ...          ...\n",
       "61    1.759223   indcd_q_yn\n",
       "62    1.570958   indcd_r_yn\n",
       "63    1.463970   indcd_s_yn\n",
       "64    1.242008   indcd_t_yn\n",
       "65         NaN   indcd_u_yn\n",
       "\n",
       "[66 rows x 2 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "\n",
    "#다중공산성\n",
    "vif = pd.DataFrame()\n",
    "vif['VIF Factor'] = [variance_inflation_factor(df1_data.values, i) for i in range(df1_data.shape[1])]\n",
    "vif['features'] = df1_data.columns\n",
    "vif"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/app-root/lib/python3.6/site-packages/statsmodels/stats/outliers_influence.py:193: RuntimeWarning: divide by zero encountered in double_scalars\n",
      "  vif = 1. / (1. - r_squared_i)\n",
      "/opt/app-root/lib/python3.6/site-packages/statsmodels/regression/linear_model.py:1715: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  return 1 - self.ssr/self.centered_tss\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIF Factor</th>\n",
       "      <th>features</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.959896</td>\n",
       "      <td>const</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>inf</td>\n",
       "      <td>ws_cnt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>inf</td>\n",
       "      <td>found_age_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>inf</td>\n",
       "      <td>found_age_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>inf</td>\n",
       "      <td>found_age_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>1.759195</td>\n",
       "      <td>indcd_q_yn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>1.568837</td>\n",
       "      <td>indcd_r_yn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>1.463666</td>\n",
       "      <td>indcd_s_yn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>1.241921</td>\n",
       "      <td>indcd_t_yn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>NaN</td>\n",
       "      <td>indcd_u_yn</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>65 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    VIF Factor     features\n",
       "0    21.959896        const\n",
       "1          inf       ws_cnt\n",
       "2          inf  found_age_1\n",
       "3          inf  found_age_2\n",
       "4          inf  found_age_3\n",
       "..         ...          ...\n",
       "60    1.759195   indcd_q_yn\n",
       "61    1.568837   indcd_r_yn\n",
       "62    1.463666   indcd_s_yn\n",
       "63    1.241921   indcd_t_yn\n",
       "64         NaN   indcd_u_yn\n",
       "\n",
       "[65 rows x 2 columns]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vif=pd.DataFrame()\n",
    "df1_data_Erase = df1_data.drop('age10_ratio', , axis=1)\n",
    "vif['VIF Factor']=[variance_inflation_factor(df1_data_Erase.values, i) for i in range(df1_data_Erase.shape[1])]\n",
    "vif['features']=df1_data_Erase.columns\n",
    "vif\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>runout_cnt</th>\n",
       "      <th>found_age_1</th>\n",
       "      <th>found_age_2</th>\n",
       "      <th>found_age_3</th>\n",
       "      <th>found_age_4</th>\n",
       "      <th>found_age_5</th>\n",
       "      <th>found_age_6</th>\n",
       "      <th>indcd_b_yn</th>\n",
       "      <th>indcd_e_yn</th>\n",
       "      <th>indcd_o_yn</th>\n",
       "      <th>indcd_u_yn</th>\n",
       "      <th>rpr_per_age_bin_10</th>\n",
       "      <th>rpr_per_age_bin_20</th>\n",
       "      <th>rpr_per_age_bin_30to50</th>\n",
       "      <th>rpr_per_age_bin_50over</th>\n",
       "      <th>rpr_per_gender_f</th>\n",
       "      <th>rpr_per_gender_m</th>\n",
       "      <th>sales_est_amt_202009</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>3065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>5929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2252</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2253</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2254</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2255</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2256</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2257 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      runout_cnt  found_age_1  found_age_2  found_age_3  found_age_4  \\\n",
       "0              0            0            0            0            0   \n",
       "1              0            0            0            0            1   \n",
       "2              0            0            1            0            0   \n",
       "3              0            0            0            1            0   \n",
       "4              0            0            1            2            3   \n",
       "...          ...          ...          ...          ...          ...   \n",
       "2252           0            0            0            0            1   \n",
       "2253           0            0            0            0            0   \n",
       "2254           0            0            0            0            0   \n",
       "2255           0            0            1            0            0   \n",
       "2256           1            0            0            0            0   \n",
       "\n",
       "      found_age_5  found_age_6  indcd_b_yn  indcd_e_yn  indcd_o_yn  \\\n",
       "0               0            1         0.0         0.0         0.0   \n",
       "1               0            0         0.0         0.0         0.0   \n",
       "2               0            4         0.0         0.0         0.0   \n",
       "3               2            0         0.0         0.0         0.0   \n",
       "4               2            8         0.0         0.0         0.0   \n",
       "...           ...          ...         ...         ...         ...   \n",
       "2252            0            0         0.0         0.0         0.0   \n",
       "2253            1            1         0.0         0.0         0.0   \n",
       "2254            0            1         0.0         0.0         0.0   \n",
       "2255            0            1         0.0         0.0         0.0   \n",
       "2256            1            1         0.0         0.0         0.0   \n",
       "\n",
       "      indcd_u_yn  rpr_per_age_bin_10  rpr_per_age_bin_20  \\\n",
       "0            0.0                   0                   0   \n",
       "1            0.0                   0                   0   \n",
       "2            0.0                   0                   0   \n",
       "3            0.0                   0                   0   \n",
       "4            0.0                   0                   1   \n",
       "...          ...                 ...                 ...   \n",
       "2252         0.0                   0                   0   \n",
       "2253         0.0                   0                   0   \n",
       "2254         0.0                   0                   0   \n",
       "2255         0.0                   0                   0   \n",
       "2256         0.0                   0                   0   \n",
       "\n",
       "      rpr_per_age_bin_30to50  rpr_per_age_bin_50over  rpr_per_gender_f  \\\n",
       "0                          1                       0                 0   \n",
       "1                          0                       1                 0   \n",
       "2                          3                       2                 1   \n",
       "3                          3                       0                 3   \n",
       "4                         11                       4                 8   \n",
       "...                      ...                     ...               ...   \n",
       "2252                       0                       1                 1   \n",
       "2253                       1                       1                 0   \n",
       "2254                       0                       1                 0   \n",
       "2255                       2                       0                 0   \n",
       "2256                       2                       1                 2   \n",
       "\n",
       "      rpr_per_gender_m  sales_est_amt_202009  \n",
       "0                    1                   199  \n",
       "1                    1                   391  \n",
       "2                    4                  3065  \n",
       "3                    0                   598  \n",
       "4                    8                  5929  \n",
       "...                ...                   ...  \n",
       "2252                 0                     3  \n",
       "2253                 2                    29  \n",
       "2254                 1                   784  \n",
       "2255                 2                   166  \n",
       "2256                 1                     0  \n",
       "\n",
       "[2257 rows x 18 columns]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "meaningful_var=df1[['runout_cnt','found_age_1', 'found_age_2', 'found_age_3',\n",
    "'found_age_4',\n",
    "'found_age_5',\n",
    "'found_age_6',\n",
    "'indcd_b_yn',\n",
    "'indcd_e_yn',\n",
    "'indcd_o_yn',\n",
    "'indcd_u_yn',\n",
    "'rpr_per_age_bin_10',\n",
    "'rpr_per_age_bin_20',\n",
    "'rpr_per_age_bin_30to50',\n",
    "'rpr_per_age_bin_50over',\n",
    "'rpr_per_gender_f',\n",
    "'rpr_per_gender_m',\n",
    "'sales_est_amt_202009']]\n",
    "meaningful_var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>ws_cnt</th>\n",
       "      <th>found_age_1</th>\n",
       "      <th>found_age_2</th>\n",
       "      <th>found_age_3</th>\n",
       "      <th>found_age_4</th>\n",
       "      <th>found_age_5</th>\n",
       "      <th>found_age_6</th>\n",
       "      <th>runout_cnt</th>\n",
       "      <th>smbiz_yn_cnt</th>\n",
       "      <th>...</th>\n",
       "      <th>indcd_l_yn</th>\n",
       "      <th>indcd_m_yn</th>\n",
       "      <th>indcd_n_yn</th>\n",
       "      <th>indcd_o_yn</th>\n",
       "      <th>indcd_p_yn</th>\n",
       "      <th>indcd_q_yn</th>\n",
       "      <th>indcd_r_yn</th>\n",
       "      <th>indcd_s_yn</th>\n",
       "      <th>indcd_t_yn</th>\n",
       "      <th>indcd_u_yn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2252</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2253</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2254</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2255</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2256</th>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2257 rows × 66 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      const  ws_cnt  found_age_1  found_age_2  found_age_3  found_age_4  \\\n",
       "0       1.0       1            0            0            0            0   \n",
       "1       1.0       1            0            0            0            1   \n",
       "2       1.0       5            0            1            0            0   \n",
       "3       1.0       3            0            0            1            0   \n",
       "4       1.0      16            0            1            2            3   \n",
       "...     ...     ...          ...          ...          ...          ...   \n",
       "2252    1.0       1            0            0            0            1   \n",
       "2253    1.0       2            0            0            0            0   \n",
       "2254    1.0       1            0            0            0            0   \n",
       "2255    1.0       2            0            1            0            0   \n",
       "2256    1.0       3            0            0            0            0   \n",
       "\n",
       "      found_age_5  found_age_6  runout_cnt  smbiz_yn_cnt  ...  indcd_l_yn  \\\n",
       "0               0            1           0             1  ...         0.0   \n",
       "1               0            0           0             0  ...         0.0   \n",
       "2               0            4           0             3  ...         0.0   \n",
       "3               2            0           0             3  ...         0.0   \n",
       "4               2            8           0            13  ...         0.0   \n",
       "...           ...          ...         ...           ...  ...         ...   \n",
       "2252            0            0           0             1  ...         0.0   \n",
       "2253            1            1           0             2  ...         0.0   \n",
       "2254            0            1           0             0  ...         0.0   \n",
       "2255            0            1           0             1  ...         0.0   \n",
       "2256            1            1           1             0  ...         0.0   \n",
       "\n",
       "      indcd_m_yn  indcd_n_yn  indcd_o_yn  indcd_p_yn  indcd_q_yn  indcd_r_yn  \\\n",
       "0            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "1            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "3            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "4            0.0         0.0         0.0         0.0         0.0         1.0   \n",
       "...          ...         ...         ...         ...         ...         ...   \n",
       "2252         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2253         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2254         0.0         0.0         0.0         0.0         1.0         0.0   \n",
       "2255         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2256         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "\n",
       "      indcd_s_yn  indcd_t_yn  indcd_u_yn  \n",
       "0            0.0         0.0         0.0  \n",
       "1            0.0         0.0         0.0  \n",
       "2            0.0         0.0         0.0  \n",
       "3            0.0         0.0         0.0  \n",
       "4            1.0         0.0         0.0  \n",
       "...          ...         ...         ...  \n",
       "2252         0.0         0.0         0.0  \n",
       "2253         0.0         0.0         0.0  \n",
       "2254         0.0         0.0         0.0  \n",
       "2255         0.0         0.0         0.0  \n",
       "2256         0.0         0.0         0.0  \n",
       "\n",
       "[2257 rows x 66 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "meaningful_var = sm.add_constant(df1_, has_constant='add')\n",
    "meaningful_var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1579, 17) (678, 17) (1579,) (678,)\n"
     ]
    }
   ],
   "source": [
    "feature_columns1 = list(meaningful_var.columns.difference(['runout_cnt']))\n",
    "X = meaningful_var[feature_columns1]\n",
    "y = meaningful_var.runout_cnt\n",
    "train_x, test_x, train_y, test_y = train_test_split(X, y, train_size = 0.7, test_size = 0.3)\n",
    "print(train_x.shape, test_x.shape, train_y.shape, test_y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_model1 = sm.OLS(train_y, train_x)\n",
    "fitted_full_model1 = full_model1.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>runout_cnt</td>    <th>  R-squared (uncentered):</th>       <td>   1.000</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared (uncentered):</th>  <td>   1.000</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th>           <td>2.029e+26</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 25 Jan 2021</td> <th>  Prob (F-statistic):</th>            <td>  0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>16:09:02</td>     <th>  Log-Likelihood:    </th>           <td>  41306.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  1579</td>      <th>  AIC:               </th>          <td>-8.259e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  1567</td>      <th>  BIC:               </th>          <td>-8.252e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>    12</td>      <th>                     </th>               <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>               <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "             <td></td>               <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>found_age_1</th>            <td>   -1.0000</td> <td> 5.85e-14</td> <td>-1.71e+13</td> <td> 0.000</td> <td>   -1.000</td> <td>   -1.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>found_age_2</th>            <td>   -1.0000</td> <td> 4.78e-14</td> <td>-2.09e+13</td> <td> 0.000</td> <td>   -1.000</td> <td>   -1.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>found_age_3</th>            <td>   -1.0000</td> <td> 4.58e-14</td> <td>-2.19e+13</td> <td> 0.000</td> <td>   -1.000</td> <td>   -1.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>found_age_4</th>            <td>   -1.0000</td> <td> 4.82e-14</td> <td>-2.08e+13</td> <td> 0.000</td> <td>   -1.000</td> <td>   -1.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>found_age_5</th>            <td>   -1.0000</td> <td>  5.3e-14</td> <td>-1.89e+13</td> <td> 0.000</td> <td>   -1.000</td> <td>   -1.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>found_age_6</th>            <td>   -1.0000</td> <td> 4.25e-14</td> <td>-2.35e+13</td> <td> 0.000</td> <td>   -1.000</td> <td>   -1.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_b_yn</th>             <td>-3.824e-16</td> <td> 1.15e-28</td> <td>-3.33e+12</td> <td> 0.000</td> <td>-3.82e-16</td> <td>-3.82e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_e_yn</th>             <td> 3.194e-16</td> <td> 3.81e-29</td> <td> 8.38e+12</td> <td> 0.000</td> <td> 3.19e-16</td> <td> 3.19e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_o_yn</th>             <td> 3.712e-16</td> <td> 1.74e-29</td> <td> 2.13e+13</td> <td> 0.000</td> <td> 3.71e-16</td> <td> 3.71e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>indcd_u_yn</th>             <td> 2.507e-16</td> <td>  3.6e-29</td> <td> 6.96e+12</td> <td> 0.000</td> <td> 2.51e-16</td> <td> 2.51e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>rpr_per_age_bin_10</th>     <td>    0.3333</td> <td> 4.14e-13</td> <td> 8.06e+11</td> <td> 0.000</td> <td>    0.333</td> <td>    0.333</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>rpr_per_age_bin_20</th>     <td>    0.3333</td> <td>    9e-14</td> <td> 3.71e+12</td> <td> 0.000</td> <td>    0.333</td> <td>    0.333</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>rpr_per_age_bin_30to50</th> <td>    0.3333</td> <td> 8.54e-14</td> <td> 3.91e+12</td> <td> 0.000</td> <td>    0.333</td> <td>    0.333</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>rpr_per_age_bin_50over</th> <td>    0.3333</td> <td> 8.63e-14</td> <td> 3.86e+12</td> <td> 0.000</td> <td>    0.333</td> <td>    0.333</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>rpr_per_gender_f</th>       <td>    0.6667</td> <td> 8.69e-14</td> <td> 7.67e+12</td> <td> 0.000</td> <td>    0.667</td> <td>    0.667</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>rpr_per_gender_m</th>       <td>    0.6667</td> <td>  8.7e-14</td> <td> 7.67e+12</td> <td> 0.000</td> <td>    0.667</td> <td>    0.667</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sales_est_amt_202009</th>   <td>-4.497e-18</td> <td> 3.76e-18</td> <td>   -1.197</td> <td> 0.231</td> <td>-1.19e-17</td> <td> 2.87e-18</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>1432.524</td> <th>  Durbin-Watson:     </th>  <td>   1.937</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>120319.941</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 3.870</td>  <th>  Prob(JB):          </th>  <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td>45.058</td>  <th>  Cond. No.          </th>  <td>6.93e+20</td> \n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] R² is computed without centering (uncentered) since the model does not contain a constant.<br/>[2] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[3] The smallest eigenvalue is 6.99e-31. This might indicate that there are<br/>strong multicollinearity problems or that the design matrix is singular."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                                 OLS Regression Results                                \n",
       "=======================================================================================\n",
       "Dep. Variable:             runout_cnt   R-squared (uncentered):                   1.000\n",
       "Model:                            OLS   Adj. R-squared (uncentered):              1.000\n",
       "Method:                 Least Squares   F-statistic:                          2.029e+26\n",
       "Date:                Mon, 25 Jan 2021   Prob (F-statistic):                        0.00\n",
       "Time:                        16:09:02   Log-Likelihood:                          41306.\n",
       "No. Observations:                1579   AIC:                                 -8.259e+04\n",
       "Df Residuals:                    1567   BIC:                                 -8.252e+04\n",
       "Df Model:                          12                                                  \n",
       "Covariance Type:            nonrobust                                                  \n",
       "==========================================================================================\n",
       "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------\n",
       "found_age_1               -1.0000   5.85e-14  -1.71e+13      0.000      -1.000      -1.000\n",
       "found_age_2               -1.0000   4.78e-14  -2.09e+13      0.000      -1.000      -1.000\n",
       "found_age_3               -1.0000   4.58e-14  -2.19e+13      0.000      -1.000      -1.000\n",
       "found_age_4               -1.0000   4.82e-14  -2.08e+13      0.000      -1.000      -1.000\n",
       "found_age_5               -1.0000    5.3e-14  -1.89e+13      0.000      -1.000      -1.000\n",
       "found_age_6               -1.0000   4.25e-14  -2.35e+13      0.000      -1.000      -1.000\n",
       "indcd_b_yn             -3.824e-16   1.15e-28  -3.33e+12      0.000   -3.82e-16   -3.82e-16\n",
       "indcd_e_yn              3.194e-16   3.81e-29   8.38e+12      0.000    3.19e-16    3.19e-16\n",
       "indcd_o_yn              3.712e-16   1.74e-29   2.13e+13      0.000    3.71e-16    3.71e-16\n",
       "indcd_u_yn              2.507e-16    3.6e-29   6.96e+12      0.000    2.51e-16    2.51e-16\n",
       "rpr_per_age_bin_10         0.3333   4.14e-13   8.06e+11      0.000       0.333       0.333\n",
       "rpr_per_age_bin_20         0.3333      9e-14   3.71e+12      0.000       0.333       0.333\n",
       "rpr_per_age_bin_30to50     0.3333   8.54e-14   3.91e+12      0.000       0.333       0.333\n",
       "rpr_per_age_bin_50over     0.3333   8.63e-14   3.86e+12      0.000       0.333       0.333\n",
       "rpr_per_gender_f           0.6667   8.69e-14   7.67e+12      0.000       0.667       0.667\n",
       "rpr_per_gender_m           0.6667    8.7e-14   7.67e+12      0.000       0.667       0.667\n",
       "sales_est_amt_202009   -4.497e-18   3.76e-18     -1.197      0.231   -1.19e-17    2.87e-18\n",
       "==============================================================================\n",
       "Omnibus:                     1432.524   Durbin-Watson:                   1.937\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           120319.941\n",
       "Skew:                           3.870   Prob(JB):                         0.00\n",
       "Kurtosis:                      45.058   Cond. No.                     6.93e+20\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] R² is computed without centering (uncentered) since the model does not contain a constant.\n",
       "[2] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[3] The smallest eigenvalue is 6.99e-31. This might indicate that there are\n",
       "strong multicollinearity problems or that the design matrix is singular.\n",
       "\"\"\""
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fitted_full_model1.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 학습 데이터 잔차\n",
    "res = fitted_full_model1.resid\n",
    "pred_y = fitted_full_model1.predict(train_x)\n",
    "# q-q plot / 정규분포 확인\n",
    "fig = sm.qqplot(res, fit=True, line='45')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>runout_cnt</th>\n",
       "      <th>indcd_b_yn</th>\n",
       "      <th>indcd_e_yn</th>\n",
       "      <th>indcd_o_yn</th>\n",
       "      <th>indcd_u_yn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2252</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2253</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2254</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2255</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2256</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2257 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      runout_cnt  indcd_b_yn  indcd_e_yn  indcd_o_yn  indcd_u_yn\n",
       "0              0         0.0         0.0         0.0         0.0\n",
       "1              0         0.0         0.0         0.0         0.0\n",
       "2              0         0.0         0.0         0.0         0.0\n",
       "3              0         0.0         0.0         0.0         0.0\n",
       "4              0         0.0         0.0         0.0         0.0\n",
       "...          ...         ...         ...         ...         ...\n",
       "2252           0         0.0         0.0         0.0         0.0\n",
       "2253           0         0.0         0.0         0.0         0.0\n",
       "2254           0         0.0         0.0         0.0         0.0\n",
       "2255           0         0.0         0.0         0.0         0.0\n",
       "2256           1         0.0         0.0         0.0         0.0\n",
       "\n",
       "[2257 rows x 5 columns]"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type=df1[['runout_cnt', 'indcd_b_yn', 'indcd_e_yn', 'indcd_o_yn', 'indcd_u_yn']]\n",
    "type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>runout_cnt</th>\n",
       "      <th>indcd_b_yn</th>\n",
       "      <th>indcd_e_yn</th>\n",
       "      <th>indcd_o_yn</th>\n",
       "      <th>indcd_u_yn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2252</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2253</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2254</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2255</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2256</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2257 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      const  runout_cnt  indcd_b_yn  indcd_e_yn  indcd_o_yn  indcd_u_yn\n",
       "0       1.0           0         0.0         0.0         0.0         0.0\n",
       "1       1.0           0         0.0         0.0         0.0         0.0\n",
       "2       1.0           0         0.0         0.0         0.0         0.0\n",
       "3       1.0           0         0.0         0.0         0.0         0.0\n",
       "4       1.0           0         0.0         0.0         0.0         0.0\n",
       "...     ...         ...         ...         ...         ...         ...\n",
       "2252    1.0           0         0.0         0.0         0.0         0.0\n",
       "2253    1.0           0         0.0         0.0         0.0         0.0\n",
       "2254    1.0           0         0.0         0.0         0.0         0.0\n",
       "2255    1.0           0         0.0         0.0         0.0         0.0\n",
       "2256    1.0           1         0.0         0.0         0.0         0.0\n",
       "\n",
       "[2257 rows x 6 columns]"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type_code=sm.add_constant(type, has_constant='add')\n",
    "type_code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "found_age_1              -1.000000e+00\n",
       "found_age_2              -1.000000e+00\n",
       "found_age_3              -1.000000e+00\n",
       "found_age_4              -1.000000e+00\n",
       "found_age_5              -1.000000e+00\n",
       "found_age_6              -1.000000e+00\n",
       "indcd_b_yn               -3.824039e-16\n",
       "indcd_e_yn                3.193578e-16\n",
       "indcd_o_yn                3.711526e-16\n",
       "indcd_u_yn                2.506522e-16\n",
       "rpr_per_age_bin_10        3.333333e-01\n",
       "rpr_per_age_bin_20        3.333333e-01\n",
       "rpr_per_age_bin_30to50    3.333333e-01\n",
       "rpr_per_age_bin_50over    3.333333e-01\n",
       "rpr_per_gender_f          6.666667e-01\n",
       "rpr_per_gender_m          6.666667e-01\n",
       "sales_est_amt_202009     -4.496898e-18\n",
       "dtype: float64"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fitted_full_model1.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "x and y must be the same size",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-87-397e2ab2dfc5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# residual pattern 확인.... ?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpred_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m4000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m4000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Fitted values'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/app-root/lib/python3.6/site-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, plotnonfinite, data, **kwargs)\u001b[0m\n\u001b[1;32m   2893\u001b[0m         \u001b[0mverts\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0medgecolors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0medgecolors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2894\u001b[0m         \u001b[0mplotnonfinite\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mplotnonfinite\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2895\u001b[0;31m         **({\"data\": data} if data is not None else {}), **kwargs)\n\u001b[0m\u001b[1;32m   2896\u001b[0m     \u001b[0msci\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m__ret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2897\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0m__ret\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/app-root/lib/python3.6/site-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1445\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1446\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1447\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1448\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1449\u001b[0m         \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/app-root/lib/python3.6/site-packages/matplotlib/cbook/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*inner_args, **inner_kwargs)\u001b[0m\n\u001b[1;32m    409\u001b[0m                          \u001b[0;32melse\u001b[0m \u001b[0mdeprecation_addendum\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    410\u001b[0m                 **kwargs)\n\u001b[0;32m--> 411\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minner_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0minner_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    412\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    413\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/app-root/lib/python3.6/site-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, plotnonfinite, **kwargs)\u001b[0m\n\u001b[1;32m   4439\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4440\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4441\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"x and y must be the same size\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4442\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4443\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: x and y must be the same size"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXwAAAD8CAYAAAB0IB+mAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/Il7ecAAAACXBIWXMAAAsTAAALEwEAmpwYAAANT0lEQVR4nO3cYYjkd33H8ffHO1NpjKb0VpC706T00njYQtIlTRFqirZc8uDugUXuIFgleGAbKVWEFEuU+MiGWhCu1ZOKVdAYfSALntwDjQTEC7chNXgXItvTeheFrDHNk6Ax7bcPZtKdrneZf3Zndy/7fb/gYP7/+e3Mlx97752d2ZlUFZKk7e8VWz2AJGlzGHxJasLgS1ITBl+SmjD4ktSEwZekJqYGP8lnkzyZ5PuXuD5JPplkKcmjSW6c/ZiSpPUa8gj/c8CBF7n+VmDf+N9R4F/WP5YkadamBr+qHgR+/iJLDgGfr5FTwNVJXj+rASVJs7FzBrexGzg/cXxhfO6nqxcmOcrotwCuvPLKP7z++utncPeS1MfDDz/8s6qaW8vXziL4g1XVceA4wPz8fC0uLm7m3UvSy16S/1zr187ir3SeAPZOHO8Zn5MkXUZmEfwF4F3jv9a5GXimqn7t6RxJ0taa+pROki8BtwC7klwAPgK8EqCqPgWcAG4DloBngfds1LCSpLWbGvyqOjLl+gL+emYTSZI2hO+0laQmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqYlBwU9yIMnjSZaS3HWR69+Q5IEkjyR5NMltsx9VkrQeU4OfZAdwDLgV2A8cSbJ/1bK/B+6vqhuAw8A/z3pQSdL6DHmEfxOwVFXnquo54D7g0Ko1BbxmfPm1wE9mN6IkaRaGBH83cH7i+ML43KSPArcnuQCcAN5/sRtKcjTJYpLF5eXlNYwrSVqrWb1oewT4XFXtAW4DvpDk1267qo5X1XxVzc/Nzc3oriVJQwwJ/hPA3onjPeNzk+4A7geoqu8CrwJ2zWJASdJsDAn+aWBfkmuTXMHoRdmFVWt+DLwNIMmbGAXf52wk6TIyNfhV9TxwJ3ASeIzRX+OcSXJPkoPjZR8E3pvke8CXgHdXVW3U0JKkl27nkEVVdYLRi7GT5+6euHwWeMtsR5MkzZLvtJWkJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNTEo+EkOJHk8yVKSuy6x5p1JziY5k+SLsx1TkrReO6ctSLIDOAb8GXABOJ1koarOTqzZB/wd8JaqejrJ6zZqYEnS2gx5hH8TsFRV56rqOeA+4NCqNe8FjlXV0wBV9eRsx5QkrdeQ4O8Gzk8cXxifm3QdcF2S7yQ5leTAxW4oydEki0kWl5eX1zaxJGlNZvWi7U5gH3ALcAT4TJKrVy+qquNVNV9V83NzczO6a0nSEEOC/wSwd+J4z/jcpAvAQlX9qqp+CPyA0Q8ASdJlYkjwTwP7klyb5ArgMLCwas3XGD26J8kuRk/xnJvdmJKk9Zoa/Kp6HrgTOAk8BtxfVWeS3JPk4HjZSeCpJGeBB4APVdVTGzW0JOmlS1VtyR3Pz8/X4uLilty3JL1cJXm4qubX8rW+01aSmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmBgU/yYEkjydZSnLXi6x7R5JKMj+7ESVJszA1+El2AMeAW4H9wJEk+y+y7irgb4CHZj2kJGn9hjzCvwlYqqpzVfUccB9w6CLrPgZ8HPjFDOeTJM3IkODvBs5PHF8Yn/s/SW4E9lbV11/shpIcTbKYZHF5efklDytJWrt1v2ib5BXAJ4APTltbVcerar6q5ufm5tZ715Kkl2BI8J8A9k4c7xmfe8FVwJuBbyf5EXAzsOALt5J0eRkS/NPAviTXJrkCOAwsvHBlVT1TVbuq6pqqugY4BRysqsUNmViStCZTg19VzwN3AieBx4D7q+pMknuSHNzoASVJs7FzyKKqOgGcWHXu7kusvWX9Y0mSZs132kpSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmhgU/CQHkjyeZCnJXRe5/gNJziZ5NMk3k7xx9qNKktZjavCT7ACOAbcC+4EjSfavWvYIMF9VfwB8FfiHWQ8qSVqfIY/wbwKWqupcVT0H3AccmlxQVQ9U1bPjw1PAntmOKUlaryHB3w2cnzi+MD53KXcA37jYFUmOJllMsri8vDx8SknSus30RdsktwPzwL0Xu76qjlfVfFXNz83NzfKuJUlT7Byw5glg78TxnvG5/yfJ24EPA2+tql/OZjxJ0qwMeYR/GtiX5NokVwCHgYXJBUluAD4NHKyqJ2c/piRpvaYGv6qeB+4ETgKPAfdX1Zkk9yQ5OF52L/Bq4CtJ/j3JwiVuTpK0RYY8pUNVnQBOrDp398Tlt894LknSjPlOW0lqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpoYFPwkB5I8nmQpyV0Xuf43knx5fP1DSa6Z+aSSpHWZGvwkO4BjwK3AfuBIkv2rlt0BPF1Vvwv8E/DxWQ8qSVqfIY/wbwKWqupcVT0H3AccWrXmEPBv48tfBd6WJLMbU5K0XjsHrNkNnJ84vgD80aXWVNXzSZ4Bfhv42eSiJEeBo+PDXyb5/lqG3oZ2sWqvGnMvVrgXK9yLFb+31i8cEvyZqarjwHGAJItVNb+Z93+5ci9WuBcr3IsV7sWKJItr/dohT+k8AeydON4zPnfRNUl2Aq8FnlrrUJKk2RsS/NPAviTXJrkCOAwsrFqzAPzl+PJfAN+qqprdmJKk9Zr6lM74Ofk7gZPADuCzVXUmyT3AYlUtAP8KfCHJEvBzRj8Upjm+jrm3G/dihXuxwr1Y4V6sWPNexAfiktSD77SVpCYMviQ1seHB92MZVgzYiw8kOZvk0STfTPLGrZhzM0zbi4l170hSSbbtn+QN2Ysk7xx/b5xJ8sXNnnGzDPg/8oYkDyR5ZPz/5LatmHOjJflskicv9V6ljHxyvE+PJrlx0A1X1Yb9Y/Qi738AvwNcAXwP2L9qzV8BnxpfPgx8eSNn2qp/A/fiT4HfHF9+X+e9GK+7CngQOAXMb/XcW/h9sQ94BPit8fHrtnruLdyL48D7xpf3Az/a6rk3aC/+BLgR+P4lrr8N+AYQ4GbgoSG3u9GP8P1YhhVT96KqHqiqZ8eHpxi952E7GvJ9AfAxRp/L9IvNHG6TDdmL9wLHquppgKp6cpNn3CxD9qKA14wvvxb4ySbOt2mq6kFGf/F4KYeAz9fIKeDqJK+fdrsbHfyLfSzD7kutqarngRc+lmG7GbIXk+5g9BN8O5q6F+NfUfdW1dc3c7AtMOT74jrguiTfSXIqyYFNm25zDdmLjwK3J7kAnADevzmjXXZeak+ATf5oBQ2T5HZgHnjrVs+yFZK8AvgE8O4tHuVysZPR0zq3MPqt78Ekv19V/7WVQ22RI8Dnquofk/wxo/f/vLmq/merB3s52OhH+H4sw4ohe0GStwMfBg5W1S83abbNNm0vrgLeDHw7yY8YPUe5sE1fuB3yfXEBWKiqX1XVD4EfMPoBsN0M2Ys7gPsBquq7wKsYfbBaN4N6stpGB9+PZVgxdS+S3AB8mlHst+vztDBlL6rqmaraVVXXVNU1jF7POFhVa/7QqMvYkP8jX2P06J4kuxg9xXNuE2fcLEP24sfA2wCSvIlR8Jc3dcrLwwLwrvFf69wMPFNVP532RRv6lE5t3McyvOwM3It7gVcDXxm/bv3jqjq4ZUNvkIF70cLAvTgJ/HmSs8B/Ax+qqm33W/DAvfgg8Jkkf8voBdx3b8cHiEm+xOiH/K7x6xUfAV4JUFWfYvT6xW3AEvAs8J5Bt7sN90qSdBG+01aSmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElq4n8BzPZculjwdYoAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# residual pattern 확인.... ?\n",
    "fig = plt.scatter(pred_y, res, s=4)\n",
    "plt.xlim(4000, 30000)\n",
    "plt.xlim(4000, 30000)\n",
    "plt.xlabel('Fitted values')\n",
    "plt.ylabel('Residual')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "135     2.571136e-13\n",
       "2123    1.101010e-13\n",
       "1038    1.000000e+00\n",
       "341    -1.113905e-12\n",
       "1545   -1.570654e-13\n",
       "            ...     \n",
       "1276    6.293942e-14\n",
       "384    -1.106232e-13\n",
       "1847    1.000000e+00\n",
       "1062   -1.826689e-14\n",
       "2020    3.706914e-14\n",
       "Length: 678, dtype: float64"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 검증 데이터에 대한 예측\n",
    "pred_y = fitted_full_model1.predict(test_x)\n",
    "pred_y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 잔차 plot\n",
    "plt.plot(np.array(test_y-pred_y), label = 'pred_full')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.964589703688726e-25"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## MSE 성능\n",
    "mean_squared_error(y_true=test_y, y_pred=pred_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
